<!--pages/distributorRegister/distributorRegister.wxml-->
<text>通过二维码编译获得的场景值：{{ dealNo }}</text>

<view class='desc'>微信小程序，MVVM的开发模式，将渲染和逻辑分离（不再让js直接操作DOM，JS只需要管理状态。使用一种模板语法来描述状态和界面解构的关系）</view>

<view class='desc'>整个小程序只有一个 App 实例，是全部页面共享的</view>

<view class='desc'>Page 是一个页面构造器，这个构造器就生成了一个页面。在生成页面的时候，小程序框架会把 data 数据和 index.wxml 一起渲染出最终的结构，于是就得到了你看到的小程序的样子。在渲染完界面之后，页面实例就会收到一个 onLoad 的回调，你可以在这个回调处理你的逻辑。</view>

<view class='desc'>小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 APP 体验的服务。</view>

<view class='desc'>框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。</view>

<view class='desc'>框架的核心是一个响应的数据绑定系统。整个小程序框架系统分为两部分：视图层（View）和逻辑层（App Service）。框架可以让数据与视图非常简单地保持同步。当做数据修改的时候，只需要在逻辑层修改数据，视图层就会做相应的更新。</view>

<view class='desc'>增加 getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈</view>

<view class='desc'>每个页面有独立的作用域，并提供模块化能力。</view>

<view class='desc'>注意：小程序框架的逻辑层并非运行在浏览器中，因此 JavaScript 在 web 中一些能力都无法使用，如 window，document 等。</view>

<view class='desc'>App() 函数用来注册一个小程序。接受一个 Object 参数，其指定小程序的生命周期回调等。</view>

<view class='desc'>App() 必须在 app.js 中调用，必须调用且只能调用一次。不然会出现无法预期的后果。</view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>

<view class='desc'></view>
